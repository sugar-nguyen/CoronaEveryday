@model CoronaEveryday.Models.CoronaRecieve

@{
    ViewData["Title"] = "Covid-19 Everyday";
}

<div class="row line-box-number">

    <div class="col-sm box-outline">
        <div class="box-number new-confirm">
            <div class="left-column">&nbsp;</div>
            <div class="right-column">
                <div class="title"><i class="fas fa-user"></i>&nbsp; @Html.DisplayNameFor(x => x.Global.NewConfirmed)</div>
                <div class="number"> @Html.DisplayFor(x => x.Global.NewConfirmed)</div>
            </div>

        </div>
    </div>
    <div class="col-sm box-outline">
        <div class="box-number total-confirm">
            <div class="left-column">&nbsp;</div>
            <div class="right-column">
                <div class="title"><i class="fas fa-user"></i>&nbsp; @Html.DisplayNameFor(x => x.Global.TotalConfirmed)</div>
                <div class="number">@Html.DisplayFor(x => x.Global.TotalConfirmed)</div>
            </div>

        </div>
    </div>
    <div class="col-sm box-outline">
        <div class="box-number new-death">
            <div class="left-column">&nbsp;</div>
            <div class="right-column">
                <div class="title"><i class="fas fa-user-slash"></i>&nbsp;@Html.DisplayNameFor(x => x.Global.NewDeaths)</div>
                <div class="number">@Html.DisplayFor(x => x.Global.NewDeaths)</div>
            </div>

        </div>
    </div>
    <div class="col-sm box-outline">
        <div class="box-number total-death">
            <div class="left-column">&nbsp;</div>
            <div class="right-column">
                <div class="title"><i class="fas fa-user-slash"></i>&nbsp;@Html.DisplayNameFor(x => x.Global.TotalDeaths)</div>
                <div class="number">@Html.DisplayFor(x => x.Global.TotalDeaths)</div>
            </div>

        </div>
    </div>
    <div class="col-sm box-outline">
        <div class="box-number new-recovered">
            <div class="left-column">&nbsp;</div>
            <div class="right-column">
                <div class="title"><i class="fas fa-user-tie"></i>&nbsp;@Html.DisplayNameFor(x => x.Global.NewRecovered)</div>
                <div class="number">@Html.DisplayFor(x => x.Global.NewRecovered)</div>
            </div>

        </div>
    </div>
    <div class="col-sm box-outline">
        <div class="box-number total-recovered">
            <div class="left-column">&nbsp;</div>
            <div class="right-column">
                <div class="title"><i class="fas fa-user-tie"></i>&nbsp;@Html.DisplayNameFor(x => x.Global.TotalRecovered)</div>
                <div class="number">@Html.DisplayFor(x => x.Global.TotalRecovered)</div>
            </div>

        </div>
    </div>


</div>



<div class="row  table-panel">
    <div class="col-lg-12">
        <div class="row">
            <div class="col-lg-12 line-header"><span class="title-header">Danh sách chi tiết</span></div>
        </div>
        <div id="table-country">
            <table class="table table-sm table-bordered table-striped" id="table-detail">
                <thead>
                    <tr>
                        <th>
                            @Html.DisplayNameFor(model => model.Countries[0].Country)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Countries[0].CountryCode)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Countries[0].NewConfirmed)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Countries[0].TotalConfirmed)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Countries[0].NewDeaths)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Countries[0].TotalDeaths)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Countries[0].NewRecovered)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Countries[0].TotalRecovered)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Countries[0].Date)
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.Countries)
                    {
                        <tr>
                            <td>
                                @Html.DisplayFor(modelItem => item.Country)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.CountryCode)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.NewConfirmed)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.TotalConfirmed)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.NewDeaths)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.TotalDeaths)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.NewRecovered)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.TotalRecovered)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Date)
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>
<div class="row bar-chart">
    <div class="col-lg-12">
        <canvas id="chart-canvas" height="400" width="800"></canvas>
    </div>
</div>

<div class="row pie-chart">
    <div class="col-sm">
        <canvas id="pie-canvas-1" height="80" width="80"></canvas>
        <div class="title-chart">New Confirmed</div>
    </div>
    <div class="col-sm">
        <canvas id="pie-canvas-2" height="80" width="80"></canvas>
        <div class="title-chart">Total Confirmed</div>
    </div>
    <div class="col-sm">
        <canvas id="pie-canvas-3" height="80" width="80"></canvas>
        <div class="title-chart">Total death</div>
    </div>
    <div class="col-sm">
        <canvas id="pie-canvas-4" height="80" width="80"></canvas>
        <div class="title-chart">Total recovered</div>
    </div>
</div>

@section Scripts{
    <script>
        (function ($) {
            var main = function () {
                this.render_table = function () {
                    $('#table-detail').DataTable(
                        {
                            "info": false,
                            "order":[[2,'desc']],
                            "lengthChange": false,
                            "pageLength": 25,
                            "pagingType": "full_numbers",
                            "language": {
                                "search": "Tìm kiếm",
                            }
                        }
                    );
                };
                this.render_bar_chart = function () {
                    var promise = new Promise(function (resolve, reject) {
                        $.ajax({
                            url: '/Home/GetJsonCountry',
                            type: 'GET',
                            success: function (data) {
                                resolve(Array.from(data).slice(0, 5));
                            },
                            error: function (err) {
                                console.log(err.responseText);
                            }
                        });
                    });
                    promise.then(function (data) {
                        var arrLabel = [];
                        var arrNewConfirm = [], arrTotalConfirm = [], arrNewDeath = [], arrTotalDeath = [], arrNewRecovered = [], arrTotalRecovered = [];

                        $.each(data, function (key, item) {
                            arrLabel.push(item.country);
                            arrNewConfirm.push(item.newConfirmed);
                            arrTotalConfirm.push(item.totalConfirmed);
                            arrNewDeath.push(item.newDeaths);
                            arrTotalDeath.push(item.totalDeaths);
                            arrNewRecovered.push(item.newRecovered);
                            arrTotalRecovered.push(item.totalRecovered);
                        });

                        var datasets = [

                            { label: "New Confirmed", backgroundColor: 'rgba(255, 99, 132, 0.5)', data: arrNewConfirm },
                            { label: "Total Confirmed", backgroundColor: 'rgba(54, 162, 235, 0.5)', data: arrTotalConfirm },
                            { label: "New Death", backgroundColor: 'rgba(255, 206, 86, 0.5)', data: arrNewDeath },
                            { label: "Total Death", backgroundColor: 'rgba(75, 192, 192, 0.5)', data: arrTotalDeath },
                            { label: "New Recovered", backgroundColor: 'rgba(153, 102, 255, 0.5)', data: arrNewRecovered },
                            { label: "Total Recovered", backgroundColor: 'rgba(255, 159, 64, 0.5)', data: arrTotalRecovered },
                        ];

                        var ctx = $('#chart-canvas')[0].getContext('2d');
                        var bar_chart = new Chart(ctx, {
                            type: 'bar',
                            data: {
                                labels: arrLabel,
                                datasets: datasets
                            },
                            options: {
                                scales: {
                                    yAxes: [{
                                        ticks: {
                                            callback: function (value, index, values) {
                                                return value.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1,');
                                            }
                                        }
                                    }]
                                },
                                tooltips: {
                                    callbacks: {
                                        label: function (tooltipItem, data) {
                                            var label = data.datasets[tooltipItem.datasetIndex].label || '';

                                            label += ' ' + tooltipItem.yLabel.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1,');
                                            return label;
                                        }
                                    }
                                },
                                plugins: {
                                    datalabels: {
                                        // hide datalabels for all datasets
                                        display: false
                                    }
                                }
                            }
                        });
                    });



                };
                this.render_pie_chart = function () {
                    var promise = new Promise(function (resolve, reject) {
                        $.ajax({
                            url: '/Home/GetJsonCountry',
                            type: 'GET',
                            success: function (data) {
                                resolve(Array.from(data));
                            },
                            error: function (err) {
                                console.log(err.responseText);
                            }
                        });
                    });
                    promise.then(function (data) {
                        var arrLabel = [];
                        var arrNewConfirm = [], arrTotalConfirm = [], arrTotalDeath = [], arrTotalRecovered = [];

                        var arrSortByNewConfirmed = Array.from(data).sort((a, b) => (a.newConfirmed < b.newConfirmed) ? 1 : -1);

                        $.each(arrSortByNewConfirmed.slice(0, 4), function (key, item) {
                            arrLabel.push(item.country);
                            arrNewConfirm.push(item.newConfirmed);
                        });

                        arrLabel.push("Còn lại");
                        arrNewConfirm.push(arrSortByNewConfirmed.slice(5, arrSortByNewConfirmed.length - 1).map(x => x.newConfirmed).reduce((a, b) => a + b));
                        /********************************************* */

                        var options = {
                            tooltips: {
                                enabled: false
                            },
                            plugins: {
                                datalabels: {
                                    formatter: (value, ctx) => {
                                        let datasets = ctx.chart.data.datasets;
                                        if (datasets.indexOf(ctx.dataset) === datasets.length - 1) {
                                            let sum = datasets[0].data.reduce((a, b) => a + b, 0);
                                            let percentage = Math.round((value / sum) * 100) + '%';
                                            return percentage;
                                        } else {
                                            return percentage;
                                        }
                                    },
                                    color: '#fff',
                                }
                            }
                        };

                        var ctx = $('#pie-canvas-1')[0].getContext('2d');
                        var pie_chart = new Chart(ctx, {
                            type: 'pie',
                            responsive: true,
                            data: {
                                labels: arrLabel,
                                datasets: [{
                                    backgroundColor: [
                                        "#2ecc71",
                                        "#3498db",
                                        "#95a5a6",
                                        "#9b59b6",
                                        "#f1c40f",
                                    ],
                                    data: arrNewConfirm
                                }]
                            },
                            options: options,

                        });

                        /********************** */
                        arrLabel.length = 0;
                        var arrSortByTotalConfirmed = Array.from(data).sort((a, b) => (a.totalConfirmed < b.totalConfirmed) ? 1 : -1);
                        $.each(arrSortByTotalConfirmed.slice(0, 4), function (key, item) {
                            arrLabel.push(item.country);
                            arrTotalConfirm.push(item.totalConfirmed);
                        });
                        arrLabel.push("Còn lại");
                        arrTotalConfirm.push(arrSortByTotalConfirmed.slice(5, arrSortByTotalConfirmed.length - 1).map(x => x.totalConfirmed).reduce((a, b) => a + b));
                        /******************************************************** */

                        var ctx2 = $('#pie-canvas-2')[0].getContext('2d');

                        var pie_chart2 = new Chart(ctx2, {
                            type: 'pie',
                            data: {
                                labels: arrLabel,
                                datasets: [{
                                    backgroundColor: [
                                        "#2ecc71",
                                        "#3498db",
                                        "#95a5a6",
                                        "#9b59b6",
                                        "#f1c40f",
                                    ],
                                    data: arrTotalConfirm
                                }]
                            },
                            options: options,

                        });

                        /********************************** */
                        arrLabel.length = 0;
                        var arrSortByTotalDeath = Array.from(data).sort((a, b) => (a.totalDeaths < b.totalDeaths) ? 1 : -1);
                        $.each(arrSortByTotalDeath.slice(0, 4), function (key, item) {
                            arrLabel.push(item.country);
                            arrTotalDeath.push(item.totalDeaths);
                        });
                        arrLabel.push("Còn lại");
                        arrTotalDeath.push(arrSortByTotalDeath.slice(5, arrSortByTotalDeath.length - 1).map(x => x.totalDeaths).reduce((a, b) => a + b));

                        var ctx3 = $('#pie-canvas-3')[0].getContext('2d');
                        var pie_chart3 = new Chart(ctx3, {
                            type: 'pie',
                            data: {
                                labels: arrLabel,
                                datasets: [{
                                    backgroundColor: [
                                        "#2ecc71",
                                        "#3498db",
                                        "#95a5a6",
                                        "#9b59b6",
                                        "#f1c40f",
                                    ],
                                    data: arrTotalDeath
                                }]
                            },
                            options: options,
                        });

                        /***********************************/
                        arrLabel.length = 0;
                        var arrSortByTotalRecovered = Array.from(data).sort((a, b) => (a.totalRecovered < b.totalRecovered) ? 1 : -1);
                        $.each(arrSortByTotalRecovered.slice(0, 4), function (key, item) {
                            arrLabel.push(item.country);
                            arrTotalRecovered.push(item.totalRecovered);
                        });
                        arrLabel.push("Còn lại");
                        arrTotalRecovered.push(arrSortByTotalRecovered.slice(5, arrSortByTotalRecovered.length - 1).map(x => x.totalRecovered).reduce((a, b) => a + b));

                        var ctx4 = $('#pie-canvas-4')[0].getContext('2d');
                        var pie_chart4 = new Chart(ctx4, {
                            type: 'pie',
                            data: {
                                labels: arrLabel,
                                datasets: [{
                                    backgroundColor: [
                                        "#2ecc71",
                                        "#3498db",
                                        "#95a5a6",
                                        "#9b59b6",
                                        "#f1c40f",
                                    ],
                                    data: arrTotalRecovered
                                }]
                            },
                            options: options,
                        });
                    });
                };
                this.run = function () {

                    this.render_table();
                   // this.render_bar_chart();
                    this.render_pie_chart();
                };

                this.run();
            };

            new main();



        })($)
    </script>
}